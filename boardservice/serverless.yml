# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: boardservice

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: java8
  timeout: 300
  memorySize: 1536

# you can overwrite defaults here
  stage: dev
  region: eu-west-1

  apiKeys:
    - BOARD_API_KEY

# you can define service wide environment variables here
  environment:
    CFG4J_ENV: prod

# you can add packaging information here
package:
  artifact: build/distributions/boardservice-1.0.zip

functions:
  board:
    handler: com.workingbit.board.LambdaHandler::handleRequest

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
    events:
      - http:
          path: /api/v1/board/add-draught
          method: post
#          private: true
      - http:
          path: /api/v1/baord/add-draught
          method: options
      - http:
          path: /api/v1/board
          method: post
#          private: true
      - http:
          path: /api/v1/board
          method: options
      - http:
          path: /api/v1/board/{boardId}
          method: delete
#          private: true
          request:
            parameters:
              path:
                boardId: true
      - http:
          path: /api/v1/board/{boardId}
          method: options
          request:
            parameters:
              path:
                boardId: true
      - http:
          path: /api/v1/board/{boardId}
          method: get
#          private: true
          request:
            parameters:
              path:
                boardId: true
      - http:
          path: /api/v1/board/{boardId}
          method: options
          request:
            parameters:
              path:
                boardId: true
      - http:
          path: /api/v1/board/highlight
          method: post
#          private: true
      - http:
          path: /api/v1/board/highlight
          method: options
      - http:
          path: /api/v1/board/move
          method: post
#          private: true
      - http:
          path: /api/v1/board/move
          method: options
      - http:
          path: /api/v1/board/undo
          method: post
#          private: true
      - http:
          path: /api/v1/board/undo
          method: options
      - http:
          path: /api/v1/board/redo
          method: post
#          private: true
      - http:
          path: /api/v1/board/redo
          method: options
      - http:
          path: /api/v1/board/load-board
          method: post
#          private: true
      - http:
          path: /api/v1/board/load-board
          method: options
      - http:
          path: /api/v1/board/make-white-stroke
          method: put
#          private: true
      - http:
          path: /api/v1/board/make-white-stroke
          method: options
      - http:
          path: /api/v1/boards
          method: post
#          private: true
      - http:
          path: /api/v1/boards
          method: options

# you can add CloudFormation api templates here
resources:
  Resources:
    DynamoDbTableBoardBox:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: BoardBox
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: createdAt
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
        - IndexName: boardBoxIndex
          KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: createdAt
            KeyType: RANGE
          Projection:
            ProjectionType: KEYS_ONLY
          ProvisionedThroughput:
            ReadCapacityUnits: '1'
            WriteCapacityUnits: '1'

    DynamoDbTableBoard:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Board
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: createdAt
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    DynamoDBIamPolicyBoardBox:
      Type: AWS::IAM::Policy
      DependsOn: DynamoDbTableBoardBox
      Properties:
        PolicyName: lambda-dynamodb-boardbox
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:*
#                - dynamodb:GetItem
#                - dynamodb:PutItem
#                - dynamodb:UpdateItem
#                - dynamodb:Scan
#                - dynamodb:Query
              Resource: arn:aws:dynamodb:*:*:table/BoardBox
        Roles:
          - Ref: IamRoleLambdaExecution
    DynamoDBIamPolicyBoard:
      Type: AWS::IAM::Policy
      DependsOn: DynamoDbTableBoard
      Properties:
        PolicyName: lambda-dynamodb-board
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:DescribeTable
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:UpdateItem
                - dynamodb:Scan
                - dynamodb:Query
              Resource: arn:aws:dynamodb:*:*:table/Board
        Roles:
          - Ref: IamRoleLambdaExecution

plugins:
  - serverless-dynamodb-local
  - serverless-dynamodb-fixtures-plugin

custom:
  dynamodb:
    start:
      port: 8083
      inMemory: true
      migrate: true
