buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
        flatDir {
            dirs 'lib'
        }
    }
    dependencies {
    }
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'maven'

    group = 'com.workingbit'
    version = '1.0'
}

subprojects {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }

    dependencies {
        compile 'org.apache.commons:commons-lang3:3.5'
        compile 'org.apache.commons:commons-collections4:4.1'

        compile 'com.amazonaws:aws-lambda-java-core:1.1.0'
        compile 'com.amazonaws.serverless:aws-serverless-java-container-spark:0.7'
        compile 'com.amazonaws:aws-lambda-java-core:1.1.0'
        compile ('com.amazonaws:aws-lambda-java-log4j:1.0.0') {
            exclude group: 'log4j', module: 'log4j'
        }

    }

    test.onlyIf { Boolean.getBoolean('skip.tests') }
}

configure(subprojects.findAll {it.name.endsWith('module')}) {

    dependencies {
        compile 'com.amazonaws:aws-java-sdk-dynamodb:1.11.150'

        compile 'com.fasterxml.jackson.core:jackson-core:2.8.5'
        compile 'com.fasterxml.jackson.core:jackson-databind:2.8.5'
        compile 'com.fasterxml.jackson.core:jackson-annotations:2.8.5'
        compile 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.9.1'
        compile 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.9.1'
        compile 'com.fasterxml.jackson.module:jackson-module-parameter-names:2.9.1'

        compile 'org.projectlombok:lombok:1.16.18'

        compile 'uk.com.robust-it:cloning:1.9.5'

        compile 'com.mashape.unirest:unirest-java:1.4.9'

        compile 'org.cfg4j:cfg4j-core:4.4.1'

        compile 'org.slf4j:slf4j-log4j12:1.7.12'
        compile 'log4j:log4j:1.2.17'
    }
}

configure(subprojects.findAll {it.name.endsWith('service')}) {
    dependencies {
        compile "com.sparkjava:spark-core:2.7.2"

        compile 'io.reactivex:rxjava:1.2.2'

        testCompile group: 'junit', name: 'junit', version: '4.+'
        testCompile "com.despegar:spark-test:1.1.4"
    }
}

project(':articleservice') {
    apply plugin: 'application'

    mainClassName = 'com.workingbit.article.ArticleApplication'

    dependencies {
        compile project(':sharedmodule')
    }

    // Task for building the zip file for upload
    task buildZip(type: Zip) {
        // Using the Zip API from gradle to build a zip file of all the dependencies
        //
        // The path to this zip file can be set in the serverless.yml file for the
        // package/artifact setting for deployment to the S3 bucket
        //
        // Link: https://docs.gradle.org/current/dsl/org.gradle.api.tasks.bundling.Zip.html

        // set the base name of the zip file
        baseName = "articleservice"
        from compileJava
        from processResources
        into("lib") {
            from configurations.runtime
        }
    }

    build.dependsOn buildZip
}

project(':boardservice') {
    apply plugin: 'application'

    mainClassName = 'com.workingbit.board.BoardApplication'

    dependencies {
        compile project(':sharedmodule')

        // tree
        compile 'com.github.rutledgepaulv:prune:1.3'

        compile files('lib/grammatica-1.6.jar')
    }

    // Task for building the zip file for upload
    task buildZip(type: Zip) {
        // Using the Zip API from gradle to build a zip file of all the dependencies
        //
        // The path to this zip file can be set in the serverless.yml file for the
        // package/artifact setting for deployment to the S3 bucket
        //
        // Link: https://docs.gradle.org/current/dsl/org.gradle.api.tasks.bundling.Zip.html

        // set the base name of the zip file
        baseName = "boardservice"
        from compileJava
        from processResources
        into("lib") {
            from configurations.runtime
        }
    }

    build.dependsOn buildZip
}

project(':sharedmodule') {
    jar {
        baseName = 'sharedmdoule'
        version = "${sharemodule_version}"
    }

    dependencies {
        compile 'commons-codec:commons-codec:1.9'
    }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.0'
}

task cleanBuild(type: GradleBuild) {
    tasks = ['clean', 'build']
}
