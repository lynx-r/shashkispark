# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: shashkiwiki-dynamodb # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs6.10

# you can overwrite defaults here
  stage: prod
  region: eu-west-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  hello:
    handler: handler.hello

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

resources:
  Resources:
    DynamoDbTableSHASHKIWIKISecureUser:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: SHASHKIWIKISecureUser
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
          - AttributeName: userSession
            AttributeType: S
          - AttributeName: username
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: createdAt
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        GlobalSecondaryIndexes:
        - IndexName: userSessionIndex
          KeySchema:
          - AttributeName: userSession
            KeyType: HASH
          - AttributeName: createdAt
            KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
        - IndexName: usernameIndex
          KeySchema:
          - AttributeName: username
            KeyType: HASH
          - AttributeName: createdAt
            KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
    DynamoDBIamPolicySHASHKIWIKISecureUser:
      Type: AWS::IAM::Policy
      DependsOn: DynamoDbTableSHASHKIWIKISecureUser
      Properties:
        PolicyName: lambda-dynamodb-sHASHKIWIKISecureUser
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:DescribeTable
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:UpdateItem
                - dynamodb:Scan
                - dynamodb:Query
              Resource: arn:aws:dynamodb:*:*:table/SHASHKIWIKISecureUser
        Roles:
          - Ref: IamRoleLambdaExecution
    DynamoDbTableSHASHKIWIKIArticle:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: SHASHKIWIKIArticle
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
          - AttributeName: humanReadableUrl
            AttributeType: S
          - AttributeName: articleStatus
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: createdAt
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        GlobalSecondaryIndexes:
        - IndexName: articleIdIndex
          KeySchema:
          - AttributeName: id
            KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
        - IndexName: articleStatusIndex
          KeySchema:
          - AttributeName: articleStatus
            KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
        - IndexName: humanReadableUrlIndex
          KeySchema:
          - AttributeName: humanReadableUrl
            KeyType: HASH
#          - AttributeName: createdAt
#            KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
    DynamoDBIamPolicySHASHKIWIKIArticle:
      Type: AWS::IAM::Policy
      DependsOn: DynamoDbTableSHASHKIWIKIArticle
      Properties:
        PolicyName: lambda-dynamodb-sHASHKIWIKIArticle
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:DescribeTable
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:UpdateItem
                - dynamodb:Scan
                - dynamodb:Query
              Resource: arn:aws:dynamodb:*:*:table/SHASHKIWIKIArticle
        Roles:
          - Ref: IamRoleLambdaExecution
    DynamoDbTableSHASHKIWIKIBoardBox:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: SHASHKIWIKIBoardBox
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: createdAt
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        GlobalSecondaryIndexes:
        - IndexName: boardBoxIndex
          KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: createdAt
            KeyType: RANGE
          Projection:
            ProjectionType: KEYS_ONLY
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5

    DynamoDbTableSHASHKIWIKIBoard:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: SHASHKIWIKIBoard
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: createdAt
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

    DynamoDbTableSHASHKIWIKINotation:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: SHASHKIWIKINotation
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: createdAt
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

    DynamoDbTableSHASHKIWIKINotationHistory:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: SHASHKIWIKINotationHistory
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: createdAt
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

    DynamoDBIamPolicySHASHKIWIKIBoardBox:
      Type: AWS::IAM::Policy
      DependsOn: DynamoDbTableSHASHKIWIKIBoardBox
      Properties:
        PolicyName: lambda-dynamodb-SHASHKIWIKIBoardBox
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:DescribeTable
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:UpdateItem
                - dynamodb:Scan
                - dynamodb:Query
              Resource: arn:aws:dynamodb:*:*:table/SHASHKIWIKIBoardBox
        Roles:
          - Ref: IamRoleLambdaExecution

    DynamoDBIamPolicySHASHKIWIKIBoard:
      Type: AWS::IAM::Policy
      DependsOn: DynamoDbTableSHASHKIWIKIBoard
      Properties:
        PolicyName: lambda-dynamodb-SHASHKIWIKIBoard
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:DescribeTable
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:UpdateItem
                - dynamodb:Scan
                - dynamodb:Query
              Resource: arn:aws:dynamodb:*:*:table/SHASHKIWIKIBoard
        Roles:
          - Ref: IamRoleLambdaExecution

    DynamoDBIamPolicySHASHKIWIKINotation:
      Type: AWS::IAM::Policy
      DependsOn: DynamoDbTableSHASHKIWIKINotation
      Properties:
        PolicyName: lambda-dynamodb-SHASHKIWIKINotation
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:DescribeTable
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:UpdateItem
                - dynamodb:Scan
                - dynamodb:Query
              Resource: arn:aws:dynamodb:*:*:table/SHASHKIWIKINotation
        Roles:
          - Ref: IamRoleLambdaExecution

    DynamoDBIamPolicySHASHKIWIKINotationHistory:
      Type: AWS::IAM::Policy
      DependsOn: DynamoDbTableSHASHKIWIKINotationHistory
      Properties:
        PolicyName: lambda-dynamodb-SHASHKIWIKINotationHistory
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:DescribeTable
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:UpdateItem
                - dynamodb:Scan
                - dynamodb:Query
              Resource: arn:aws:dynamodb:*:*:table/SHASHKIWIKINotationHistory
        Roles:
          - Ref: IamRoleLambdaExecution

plugins:
  - serverless-dynamodb-local
#  - serverless-dynamodb-fixtures-plugin

custom:
  dynamodb:
    start:
      port: 8765
      inMemory: false
      migrate: false
